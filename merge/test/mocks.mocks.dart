// Mocks generated by Mockito 5.4.4 from annotations
// in merge/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:bloc/bloc.dart' as _i11;
import 'package:dartz/dartz.dart' as _i8;
import 'package:merge/core/failures/failures.dart' as _i14;
import 'package:merge/features/project/domain/application/entity/application.dart'
    as _i13;
import 'package:merge/features/project/domain/application/repository/app_repo.dart'
    as _i6;
import 'package:merge/features/project/domain/project/entity/project.dart'
    as _i10;
import 'package:merge/features/project/domain/project/repository/pro_repo.dart'
    as _i2;
import 'package:merge/features/project/domain/user/entity/user.dart' as _i12;
import 'package:merge/features/project/domain/user/repository/user_repository.dart'
    as _i4;
import 'package:merge/features/project/presentation/bloc/application_cubit.dart'
    as _i7;
import 'package:merge/features/project/presentation/bloc/project_cubit.dart'
    as _i3;
import 'package:merge/features/project/presentation/bloc/user_auth_cubit.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIProjectRepository_0 extends _i1.SmartFake
    implements _i2.IProjectRepository {
  _FakeIProjectRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProjectState_1 extends _i1.SmartFake implements _i3.ProjectState {
  _FakeProjectState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIUserRepository_2 extends _i1.SmartFake
    implements _i4.IUserRepository {
  _FakeIUserRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserAuthState_3 extends _i1.SmartFake implements _i5.UserAuthState {
  _FakeUserAuthState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIApplicationRepository_4 extends _i1.SmartFake
    implements _i6.IApplicationRepository {
  _FakeIApplicationRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApplicationState_5 extends _i1.SmartFake
    implements _i7.ApplicationState {
  _FakeApplicationState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_6<L, R> extends _i1.SmartFake implements _i8.Either<L, R> {
  _FakeEither_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProjectCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectCubit extends _i1.Mock implements _i3.ProjectCubit {
  MockProjectCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IProjectRepository get projectRepository => (super.noSuchMethod(
        Invocation.getter(#projectRepository),
        returnValue: _FakeIProjectRepository_0(
          this,
          Invocation.getter(#projectRepository),
        ),
      ) as _i2.IProjectRepository);

  @override
  _i3.ProjectState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeProjectState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.ProjectState);

  @override
  _i9.Stream<_i3.ProjectState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i3.ProjectState>.empty(),
      ) as _i9.Stream<_i3.ProjectState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> getProjects() => (super.noSuchMethod(
        Invocation.method(
          #getProjects,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> createProject(_i10.Project? project) => (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updateProject(_i10.Project? project) => (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteProject(String? projectId) => (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [projectId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void resetState() => super.noSuchMethod(
        Invocation.method(
          #resetState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i3.ProjectState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i11.Change<_i3.ProjectState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [UserAuthCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserAuthCubit extends _i1.Mock implements _i5.UserAuthCubit {
  MockUserAuthCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.IUserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeIUserRepository_2(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i4.IUserRepository);

  @override
  _i5.UserAuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeUserAuthState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.UserAuthState);

  @override
  _i9.Stream<_i5.UserAuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i5.UserAuthState>.empty(),
      ) as _i9.Stream<_i5.UserAuthState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> signUp(_i12.User? user) => (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [user],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void emit(_i5.UserAuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i11.Change<_i5.UserAuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [ApplicationCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplicationCubit extends _i1.Mock implements _i7.ApplicationCubit {
  MockApplicationCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.IApplicationRepository get applicationRepository => (super.noSuchMethod(
        Invocation.getter(#applicationRepository),
        returnValue: _FakeIApplicationRepository_4(
          this,
          Invocation.getter(#applicationRepository),
        ),
      ) as _i6.IApplicationRepository);

  @override
  _i7.ApplicationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeApplicationState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.ApplicationState);

  @override
  _i9.Stream<_i7.ApplicationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i7.ApplicationState>.empty(),
      ) as _i9.Stream<_i7.ApplicationState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void resetState() => super.noSuchMethod(
        Invocation.method(
          #resetState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> getApplicationsByProjectId(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationsByProjectId,
          [projectId],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> submitApplication(_i13.Application? application) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitApplication,
          [application],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> createApplication(_i13.Application? application) =>
      (super.noSuchMethod(
        Invocation.method(
          #createApplication,
          [application],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> updateApplication(_i13.Application? application) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateApplication,
          [application],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteApplication(
    String? applicationId,
    String? projectId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteApplication,
          [
            applicationId,
            projectId,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void emit(_i7.ApplicationState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i11.Change<_i7.ApplicationState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [IUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserRepository extends _i1.Mock implements _i4.IUserRepository {
  MockIUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i8.Either<_i14.Failure, _i12.User>> loginUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [
            email,
            password,
          ],
        ),
        returnValue: _i9.Future<_i8.Either<_i14.Failure, _i12.User>>.value(
            _FakeEither_6<_i14.Failure, _i12.User>(
          this,
          Invocation.method(
            #loginUser,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, _i12.User>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, void>> signUpUser(_i12.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpUser,
          [user],
        ),
        returnValue: _i9.Future<_i8.Either<_i14.Failure, void>>.value(
            _FakeEither_6<_i14.Failure, void>(
          this,
          Invocation.method(
            #signUpUser,
            [user],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, void>>);
}

/// A class which mocks [IProjectRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProjectRepository extends _i1.Mock
    implements _i2.IProjectRepository {
  MockIProjectRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i8.Either<_i14.Failure, void>> createProject(
          _i10.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i9.Future<_i8.Either<_i14.Failure, void>>.value(
            _FakeEither_6<_i14.Failure, void>(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, void>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, void>> updateProject(
          _i10.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i9.Future<_i8.Either<_i14.Failure, void>>.value(
            _FakeEither_6<_i14.Failure, void>(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, void>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, void>> deleteProject(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [projectId],
        ),
        returnValue: _i9.Future<_i8.Either<_i14.Failure, void>>.value(
            _FakeEither_6<_i14.Failure, void>(
          this,
          Invocation.method(
            #deleteProject,
            [projectId],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, void>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, List<_i10.Project>>> getAllProjects() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProjects,
          [],
        ),
        returnValue:
            _i9.Future<_i8.Either<_i14.Failure, List<_i10.Project>>>.value(
                _FakeEither_6<_i14.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #getAllProjects,
            [],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, List<_i10.Project>>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, _i10.Project?>> getProjectById(
          String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectById,
          [projectId],
        ),
        returnValue: _i9.Future<_i8.Either<_i14.Failure, _i10.Project?>>.value(
            _FakeEither_6<_i14.Failure, _i10.Project?>(
          this,
          Invocation.method(
            #getProjectById,
            [projectId],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, _i10.Project?>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, List<_i10.Project>>> getProjects() =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjects,
          [],
        ),
        returnValue:
            _i9.Future<_i8.Either<_i14.Failure, List<_i10.Project>>>.value(
                _FakeEither_6<_i14.Failure, List<_i10.Project>>(
          this,
          Invocation.method(
            #getProjects,
            [],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, List<_i10.Project>>>);
}

/// A class which mocks [IApplicationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIApplicationRepository extends _i1.Mock
    implements _i6.IApplicationRepository {
  MockIApplicationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i8.Either<_i14.Failure, void>> submitApplication(
          _i13.Application? application) =>
      (super.noSuchMethod(
        Invocation.method(
          #submitApplication,
          [application],
        ),
        returnValue: _i9.Future<_i8.Either<_i14.Failure, void>>.value(
            _FakeEither_6<_i14.Failure, void>(
          this,
          Invocation.method(
            #submitApplication,
            [application],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, void>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, void>> createApplication(
          _i13.Application? application) =>
      (super.noSuchMethod(
        Invocation.method(
          #createApplication,
          [application],
        ),
        returnValue: _i9.Future<_i8.Either<_i14.Failure, void>>.value(
            _FakeEither_6<_i14.Failure, void>(
          this,
          Invocation.method(
            #createApplication,
            [application],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, void>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, void>> updateApplication(
          _i13.Application? application) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateApplication,
          [application],
        ),
        returnValue: _i9.Future<_i8.Either<_i14.Failure, void>>.value(
            _FakeEither_6<_i14.Failure, void>(
          this,
          Invocation.method(
            #updateApplication,
            [application],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, void>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, void>> deleteApplication(
          String? applicationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteApplication,
          [applicationId],
        ),
        returnValue: _i9.Future<_i8.Either<_i14.Failure, void>>.value(
            _FakeEither_6<_i14.Failure, void>(
          this,
          Invocation.method(
            #deleteApplication,
            [applicationId],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, void>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, _i13.Application?>> getApplicationById(
          String? applicationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationById,
          [applicationId],
        ),
        returnValue:
            _i9.Future<_i8.Either<_i14.Failure, _i13.Application?>>.value(
                _FakeEither_6<_i14.Failure, _i13.Application?>(
          this,
          Invocation.method(
            #getApplicationById,
            [applicationId],
          ),
        )),
      ) as _i9.Future<_i8.Either<_i14.Failure, _i13.Application?>>);

  @override
  _i9.Future<_i8.Either<_i14.Failure, List<_i13.Application>>>
      getApplicationsByProjectId(String? projectId) => (super.noSuchMethod(
            Invocation.method(
              #getApplicationsByProjectId,
              [projectId],
            ),
            returnValue: _i9
                .Future<_i8.Either<_i14.Failure, List<_i13.Application>>>.value(
                _FakeEither_6<_i14.Failure, List<_i13.Application>>(
              this,
              Invocation.method(
                #getApplicationsByProjectId,
                [projectId],
              ),
            )),
          ) as _i9.Future<_i8.Either<_i14.Failure, List<_i13.Application>>>);
}
